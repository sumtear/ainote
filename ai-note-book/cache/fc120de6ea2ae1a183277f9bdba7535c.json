{
  "timestamp": 1742364105.3746488,
  "result": "# 二叉树的基本概念  \n## 二叉树的定义  \n- 二叉树是一种树形数据结构，每个节点最多有两个子节点，分别称为左子节点和右子节点。  \n\n## 二叉树的结构  \n### 根节点  \n- 树的顶部节点，没有父节点。  \n### 叶子节点  \n- 没有子节点的节点。  \n### 内部节点  \n- 至少有一个子节点的节点。  \n\n## 二叉树的类型  \n### 满二叉树  \n- 每个节点都有 0 或 2 个子节点。  \n### 完全二叉树  \n- 除了最后一层，其他层都是满的，且最后一层的节点尽可能靠左。  \n### 平衡二叉树  \n- 左右子树的高度差不超过 1。  \n### 二叉搜索树（BST）  \n- 左子节点的值小于父节点，右子节点的值大于父节点。  \n### AVL树  \n- 一种自平衡二叉搜索树，确保树的高度平衡。  \n### 红黑树  \n- 另一种自平衡二叉搜索树，通过颜色标记保持平衡。  \n\n## 二叉树的遍历方式  \n### 前序遍历  \n- 根节点 -> 左子树 -> 右子树。  \n### 中序遍历  \n- 左子树 -> 根节点 -> 右子树（对二叉搜索树，中序遍历结果是有序的）。  \n### 后序遍历  \n- 左子树 -> 右子树 -> 根节点。  \n### 层序遍历  \n- 按层次从上到下、从左到右遍历节点。"
}